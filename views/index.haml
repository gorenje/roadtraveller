!!!
%html
  %head
    %script{:src => "https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"}
    %script{:src => "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"}
    %meta{:charset => "utf-8"}/
    %title Road Traveller
    :css
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #pano-container {
        float: right;
        height: 100%;
        min-height: 93%;
        width: 80%;
      }
      #info-container {
        float: left;
        height: 100%;
        width: 20%;
      }
      #cities {
        float: top;
        height: 50%;
        overflow: scroll;
      }
      #map {
        float: bottom;
        height: 50%;
      }
      #pano {
        float: top;
        height: 100%;
      }
      .fill {
        min-height: 100%;
        height: 100%;
      }
      ul.citylist {
        list-style-type: none;
      }

    :javascript
      var panorama, map, panoramaOptions, panorama2, lastobjid = null;
      var streetDriverTimeout = null;
      var sdVisited = [], sdNotVisited = {}, initStreetDrive = true;

      function initCityList() {
        _.templateSettings = {
          interpolate: /\{\{(.+?)\}\}/g
        };
        var template = _.template($('#citylist-item-template').html());

        $.get("/cities.json",
          function(data){
          _.each( data.data, function(elem,idx){
            elem.json_data = _.escape(JSON.stringify(elem))
            $('ul.citylist').append(template(elem))
          })
        });
      }

      function linkClosestsToHeading() {
        var links = panorama.getLinks();
        if ( links.length === 1 ) { return links[0]; }

        var currentHeading = panorama.getPov().heading;
        var lnks = links.sort(function(a,b){
          var hA = a.heading, hB = b.heading;
          hA = hA < 0 ? hA + 360 : hA;
          hB = hB < 0 ? hB + 360 : hB;
          return Math.abs(currentHeading-hA) > Math.abs(currentHeading-hB);
        });

        return cacheLinks(lnks);
      }

      function travelCity(elem) {
        stopStreetDriver();
        movePanoramaTo($(elem).data().json);
        setTimeout(startStreetDriver, 2000);
      }

      function movePanoramaTo(data) {
        map.setCenter( data.location )
        panorama2.setPano(data.id)
        panorama.setPov(data.pov)
        panorama.setZoom(data.zoom)
      }

      function cacheLinks(links) {
        var returnLink = null;

        _.each( links, function(elem,idx) {
          if ( _.indexOf( sdVisited, elem.pano ) < 0 ) {
            sdNotVisited[elem.pano] = elem;
          }
        });

        if ( _.indexOf( sdVisited, links[0].pano) < 0 ) {
          returnLink = links[0];
        } else {
          var link = sdNotVisited[_.last(_.keys(sdNotVisited))];
          if ( link === undefined ) { return false; }
          setHeading( link );
          returnLink = link;
        }

        sdVisited.push(returnLink.pano);
        delete sdNotVisited[returnLink.pano]
        return returnLink;
      }

      function followLink() {
        var link = linkClosestsToHeading();
        if (! link ) {
          alert("We've lost contact")
          clearTimeout( streetDriverTimeout );
          return false;
        }
        setHeading(link);
        panorama.setPano(link.pano);
        return true;
      }

      function startStreetDriver() {
        sdVisited = [];
        sdNotVisited = {};
        streetDriver();
      }

      function stopStreetDriver() {
        if ( streetDriverTimeout !== null ) {
          clearTimeout( streetDriverTimeout );
          streetDriverTimeout = null;
        }
      }

      function streetDriver() {
        if ( followLink() ) {
          streetDriverTimeout = setTimeout(function() {
             streetDriver()
          }, 3500);
        }
      }

      function setHeading(link) {
        var heading = link.heading;
        if ( heading < 0 ) { heading += 360 }
        var pov = panorama.getPov();
        pov.heading = heading;
        panorama.setPov(pov);
      }

      function firstLocation() {
        var data = {
          "name":"Nullabor, Australia",
          "link":"https://www.google.com/maps/@-31.5506989,130.6277694,0a,71.8y,256.86h,107.7t/data=!3m4!1e1!3m2!1s404CUqt24ypiR9g8TpJp2g!2e0?source=apiv3",
          "id":"404CUqt24ypiR9g8TpJp2g",
          "location":{"lat":-31.5506989,"lng":130.6277694},
          "pov":{"heading":256.86,"pitch":17.700000000000003},
          "zoom":0
        }
        movePanoramaTo(data);
        setTimeout( startStreetDriver, 2000 );
      }

      function initialize() {
        google.maps.streetViewViewer = 'photosphere';
        var start = {lat: 36.058946, lng: -86.789344};

        panoramaOptions = {
            position: start,
            mode: 'webgl',
            clickToGo: true,
            addressControlOptions: {
                position: google.maps.ControlPosition.TOP_LEFT
            },
            linksControl: true,
            panControl:false,
            enableCloseButton: false,
            zoomControlOptions:{
                position:google.maps.ControlPosition.RIGHT_TOP
            },
            showRoadLabels: false,
            pov: {
              heading: 0,
              pitch: 10
            }
        };

        map = new google.maps.Map(document.getElementById('map'), {
          center: start,
          zoom: 14
        });
        panorama = new google.maps.StreetViewPanorama(
                          document.getElementById('pano'), panoramaOptions);
        map.setStreetView(panorama);

        panorama2 = new google.maps.StreetViewPanorama(
                          document.getElementById('pano2'), panoramaOptions);

        google.maps.event.addListener(panorama2, "pano_changed", function() {
           if ( !(panorama2.getPano().match(/F:/)) ) {
             panorama.setPano( panorama2.getPano() );
           }
        });

        firstLocation();
        setTimeout(initCityList, 1500);
      }

  %body
    #info-container
      #cities
        %ul.citylist
      #map
    #pano-container
      #pano
      #pano2

    #citylist-item-template(style = "display: none;")
      %li
        %a{ :href => '#', :onclick => "travelCity(this); return false;", :data => {:json => "{{json_data}}"} }= "{{name}}"

    %script{:async => "", :defer => "defer", :src => "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_KEY']}&callback=initialize"}
      :cdata
